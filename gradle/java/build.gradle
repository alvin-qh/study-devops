plugins {
    id 'java'
}

group = 'alvin.gradle'
version = "${System.getenv('CI_VERSION') ?: 1}.${System.getenv('CI_BUILD_NUM') ?: 0}"

sourceCompatibility = '11'
targetCompatibility = '11'

test {
    useJUnitPlatform()

    reports.html.required = true

    testLogging {
        events "SKIPPED", "FAILED"
        showStackTraces = true
        exceptionFormat = "full"
    }
}

repositories {
    maven {
        url 'https://maven.aliyun.com/nexus/content/groups/public/'
    }
    jcenter()
}

dependencies {
    implementation "com.google.guava:guava:31.0.1-jre"

    // 单元测试依赖
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2",
                       "org.junit.jupiter:junit-jupiter-engine:5.7.2",
                       dependencies.create("org.hamcrest:hamcrest-all:1.3") {
                           exclude group: 'junit'
                           exclude group: 'org.junit.vintage'
                       },
                       dependencies.create("com.google.guava:guava-testlib:31.0.1-jre") {
                           exclude group: 'junit'
                           exclude group: 'org.junit.vintage'
                       }

    // 单元测试编译期依赖
    testCompileOnly "org.junit.platform:junit-platform-launcher:1.7.2"
}

/* 输出项目信息 */
task showProjectDir {
    doLast {
        println rootProject.projectDir // 输出根项目路径
        println project.projectDir // 输出当前项目路径
        allprojects { // 遍历所有项目
            println "${it.name}=\"${it.projectDir}\""
        }
    }
}

// 设置额外的 boot 源码路径
sourceSets {
    boot {
        java {
        }
        resources {
        }
    }
}

/* 输出源码信息 */
task showSourceSets {
    doLast {
        // 代码集合对象，对应 src
        println "sourceSets=${sourceSets}"
        // main 集合对象，对应 src/main
        println "\nsourceSets.main=${sourceSets.main}"
        // main 集合对象名称，一般为 "main"
        println "\nsourceSets.main.name=${sourceSets.main.name}"
        // main 集合对象，名为 "alljava"
        println "\nsourceSets.main.allJava=${sourceSets.main.allJava}"
        // main.alljava 集合对象的源码路径，对应 src/main/java
        println "\nsourceSets.main.allJava.srcDirs=${sourceSets.main.allJava.srcDirs}"
        // main.java 集合对象，名为 "java"
        println "\nsourceSets.main.java=${sourceSets.main.java}"
        // main.java 集合对象源码路径，对应 src/main/java
        println "\nsourceSets.main.java.srcDirs=${sourceSets.main.java.srcDirs}"
        // main.resources 集合对象，名为 "resources"
        println "\nsourceSets.main.resources=${sourceSets.main.resources}"
        // main.resources 路径集合，对应 src/main/resources
        println "\nsourceSets.boot.resources.srcDirs=${sourceSets.boot.resources.srcDirs}"
        // main.runtimeClasspath 运行时 classpath 集合
        println "\nsourceSets.main.runtimeClasspath.files=${sourceSets.main.runtimeClasspath.files}"
        // main.compileClasspath 编译时 classpath 集合
        println "\nsourceSets.main.compileClasspath.files=${sourceSets.main.compileClasspath.files}"
        // main.output 路径集合，即编译结果输出路径
        println "\nsourceSets.main.output=${sourceSets.main.output}"
        // main.output 路径集合的资源输出路径
        println "\nsourceSets.main.output.resourcesDir=${sourceSets.main.output.resourcesDir}"
        // main.output 路径集合的类文件输出路径
        println "\nsourceSets.main.output.classesDirs.files=${sourceSets.main.output.classesDirs.files}"

        // sourceSets.test 相关对象和路径属性类似
    }
}

/* 设置编译选项 */
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xdoclint:none', '-Xlint:none', '-nowarn']
}

/* 执行 main 方法并传递参数 */
task runMain(type: JavaExec) {
    group = project.group
    description = "Run with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath // 设置 classpath 参数
    mainClass = 'alvin.gradle.java.Main' // 设置 main 方法所在的类
    args 'A', 'B', 'C'  // 传递给 main 方法的默认参数
}

/* 获取所有的 classpath 路径 */
def makeClassPath() {
    // 将 runtimeClasspath 的路径放入集合
    def jarNames = configurations.runtimeClasspath.collect {
        it.getName()
    }
    // 获取 classpath
    return '. libs/' + jarNames.join(' libs/')
}

/* 将当前项目的依赖拷贝到 build/libs/libs 路径下 */
task copyJarsToLib {
    def toDir = "${buildDir}/libs/libs"
    doLast {
        // 将运行时 classpath 路径拷贝到目标路径
        copy {
            from configurations.runtimeClasspath
            into toDir
        }
    }
}

/* 修改 jar task 的配置 */
jar {
    manifest { // Manifest.MF 文件生成规则
        attributes(
            "Implementation-Title": 'Gradle Demo', // 项目标题
            "Implementation-Version": "1.0", // 版本号
            "Main-Class": 'alvin.gradle.java.Main', // 主类类名
            "Class-Path": makeClassPath() // 所有依赖的 classpath 路径
        )
    }

    // 打包文件路径
    archiveFileName = "${project.group}.${project.name}-${project.version}.${archiveExtension.get()}"
}

// 令 jar 依赖于 copyJarsToLib，这样打包 jar 之前会完成依赖复制
jar.dependsOn copyJarsToLib

/* 通过命令行执行 java 项目 */
task runWithExecJar(type: Exec) {
    dependsOn jar

    group = project.group
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", jar.archiveFile.get(), "A B C"
}

/* 打包 FatJar */
task fatJar(type: Jar) {
    // 打包结果中排除如下文件
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest { // Manifest.MF 文件生成规则
        attributes(
            'Implementation-Title': 'Gradle Demo',
            'Implementation-Version': project.version,
            'Main-Class': 'alvin.gradle.java.Main',
        )
    }

    // 打包文件名
    archiveFileName = "${project.group}.${project.name}-${project.version}-fat.jar"

    // 将运行时所需的 jar 文件解压缩后放入 jar 包
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

