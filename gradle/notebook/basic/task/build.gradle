
/* Simple task */
task simpleTask {
    doLast {
        println 'Simple Task'
        2.times {
            println "\tnumber is: ${it}"
        }
    }
}


/* Task dependency */
task dependTask {
    dependsOn 'beDependedTask'
    doLast {
        println 'Task depend others'
    }
}

task beDependedTask {
    doLast {
        println 'Task be depended by other'
    }
}

/* Dynamic tasks */
4.times { num ->
    task "dynamicTask${num}" {
        doLast {
            println "This is dynamic task ${num}"
        }
    }
}


/* Set dependency on exist task */
4.times { num ->
    task "taskDepends${num}" {
        doLast {
            println "This is dynamic task ${num}"
        }
    }
}

taskDepends1.dependsOn taskDepends3
taskDepends0.dependsOn taskDepends1, taskDepends2

/* Task behaviors */
task taskBehaviors {
    // Run directly
    println "Just run"

    // run at first of task
    doFirst {
        println "First 3"
    }

    // run at last of task
    doLast {
        println "Last 1"
    }

    doFirst {
        println "First 2"
    }

    doLast {
        println "Last 2"
    }
}

taskBehaviors.doLast {
    println "Last 3"
}

taskBehaviors.doFirst {
    println "First 1"
}

/* function */
File[] fileList(String dir) {
    file(dir).listFiles({ file -> file.isFile() } as FileFilter).sort()
}

task fileLoadfile {
    doLast {
        fileList('./').each { file ->
            ant.loadfile(srcFile: file, property: "fl_${file.name}")
            println "\n>>>>\nFile \"${file.name}\" was found:\n${ant.properties["fl_${file.name}"].substring(0, 50)}...\n<<<<"
        }
    }
}

task fileChecksum {
    doLast {
        fileList('./').each { file ->
            ant.checksum(file: file, property: "cs_${file.name}")
            println "${file.name} - checksum: ${ant.properties["cs_${file.name}"]}"
        }
    }
}

/* Default tasks */
task defaultTask {
    doLast {
        println "I am default task"
    }
}

defaultTasks 'defaultTask'

/**
 * taskGraph
 * check which tasks was ran
 */
task release {
    dependsOn 'distribution'
    doLast {
        println 'We release now'
    }
}

task distribution {
    doLast {
        println "We build the zip with version=${version}"
    }
}

gradle.taskGraph.whenReady { g ->
    if (g.hasTask(":release")) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "commons-codec:commons-codec:1.11"
    }
}

import java.nio.charset.StandardCharsets
import org.apache.commons.codec.binary.Base64


/* Use external java package */
task base64encode {
    doLast {
        def base64 = new Base64()
        def encodedString = base64.encode('hello world'.getBytes(StandardCharsets.UTF_8))
        println new String(encodedString)
    }
}